{"version":3,"sources":["uptime-robot-dist.min.js","/source/uptime-robot-dist.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_get","_x4","_x5","_x6","_again","object","property","receiver","desc","parent","getter","undefined","Function","getOwnPropertyDescriptor","get","call","getPrototypeOf","global","factory","exports","module","require","define","amd","Client","bluebird","_","request","this","_request","contactArray","UptimeRobotServerError","_Error","statusCode","message","name","Error","UptimeRobotError","Monitor__PREFIX","Monitor","options","id","friendlyName","friendlyname","URL","url","type","subType","subtype","keywordType","keywordtype","keywordValue","keywordvalue","HTTPUsername","httpusername","HTTPPassword","httppassword","log","alertContacts","contacts","interval","has","_this","keys","chain","map","charAt","toUpperCase","slice","set","contact","push","toString","join","Contact__PREFIX","Contact","config","threshold","recurrence","_this2","filter","BASE","client__Client","apiKey","method","endpoint","params","arguments","payload","uri","json","noJsonCallback","format","qs","form","resolve","reject","error","response","body","stat","_this3","Instance","logs","monitors","customUptimeRatio","showMonitorAlertConcats","showTimezone","alertcontacts","offset","limit","plural","then","results","toLowerCase","singular","result","_this4","validate","instanceName","parse","_this5","monitorID","client"],"mappings":"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","file":"uptime-robot-dist.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('uptime-robot'), require('bluebird'), require('lodash'), require('request')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'uptime-robot', 'bluebird', 'lodash', 'request'], factory) :\n  factory((global.null = {}), global.Client, global.bluebird, global._, global.request)\n}(this, function (exports, Client, bluebird, _, request) { 'use strict';\n\n  Client = ('default' in Client ? Client['default'] : Client);\n  bluebird = ('default' in bluebird ? bluebird['default'] : bluebird);\n  _ = ('default' in _ ? _['default'] : _);\n  request = ('default' in request ? request['default'] : request);\n\n  'use strict';\n\n  class UptimeRobotServerError extends Error {\n    constructor(statusCode, message) {\n\n      super();\n      this.name = this.constructor.name;\n      this.statusCode = statusCode;\n      this.message = message;\n    }\n  }\n\n  var UptimeRobotError = UptimeRobotServerError;\n\n  'use strict';\n\n  const Monitor__PREFIX = 'monitor';\n\n  var contactArray;\n\n  class Monitor {\n\n    constructor(options) {\n      this.id = options.id;\n      this.friendlyName = options.friendlyname;\n      this.URL = options.url;\n      this.type = options.type || '1';\n      this.subType = options.subtype;\n      this.keywordType = options.keywordtype;\n      this.keywordValue = options.keywordvalue;\n      this.HTTPUsername = options.httpusername;\n      this.HTTPPassword = options.httppassword;\n      this.log = (options.log || []);\n      this.alertContacts = this.contacts;\n      this.interval = options.interval;\n\n      contactArray = [];\n    }\n\n    static get singular() {\n      return Monitor__PREFIX;\n    }\n\n    static get plural() {\n      return `${Monitor__PREFIX}s`;\n    }\n\n    set contact(contact) {\n\n      contactArray.push(contact);\n    }\n\n    get contacts() {\n      return _.map(contactArray, (contact) => {\n        return contact.toString();\n      }).join('-');\n    }\n\n    validate() {\n      if (!_.has(this, 'friendlyName')) {\n        return Error('`monitorFriendlyName` not defined');\n      } else if (!_.has(this, 'URL')) {\n        return Error('`monitorURL` not defined');\n      }\n\n      return true;\n    }\n\n    parse() {\n      var keys = _.keys(this);\n\n      return _.chain(keys)\n          .map(key => {\n            if (key == 'log' || key.charAt(0) === '_') {\n              return null;\n            }\n\n            return [Monitor__PREFIX + key.charAt(0).toUpperCase() + key.slice(1), this[key]];\n          })\n          .object()\n          .value();\n    }\n  }\n\n  exports.Monitor = Monitor;\n\n  'use strict';\n\n  const Contact__PREFIX = 'alertContact';\n\n  class Contact {\n    constructor(options) {\n      this.id = options.id;\n      this.friendlyName = options.friendlyname;\n      this.type = options.type || '2';\n      this.value = options.value;\n\n      this.config = {threshold: 0, recurrence: 0};\n\n    }\n\n    static get singular() {\n      return Contact__PREFIX;\n    }\n\n    static get plural() {\n      return `${Contact__PREFIX}s`;\n    }\n\n    toString() {\n      return [this.id, this.config.threshold, this.config.recurrence].join('_');\n    }\n\n    validate() {\n      if (!_.has(this, 'type')) {\n        return Error('`type` not defined');\n      } else if (!_.has(this, 'value')) {\n        return Error('`type` not defined');\n      }\n\n      return true;\n    }\n\n    parse() {\n      var keys = _.keys(this);\n\n      return _.chain(keys)\n          .map(key => {\n            if (key === 'config') {\n              return null;\n            }\n\n            return [Contact__PREFIX + key.charAt(0).toUpperCase() + key.slice(1), this[key]];\n          })\n          .filter()\n          .object()\n          .value();\n    }\n  }\n\n  exports.Contact = Contact;\n\n  'use strict';\n\n  const BASE = 'http://api.uptimerobot.com/';\n\n  class client__Client {\n    constructor(apiKey) {\n\n      if (apiKey === '' || typeof apiKey !== 'string') {\n        throw new Error('Uptime Robot API Key must be provided');\n      }\n\n      this.apiKey = apiKey;\n    }\n\n    request(method, endpoint, params = {}) {\n      var payload = {\n        method,\n        uri: BASE + endpoint\n      };\n\n      payload.json = true;\n\n      params.apiKey = this.apiKey;\n      params.noJsonCallback = 1;\n      params.format = 'json';\n\n      if (method === 'GET') {\n        payload.qs = params;\n      } else {\n        payload.form = params;\n      }\n\n      return new bluebird((resolve, reject) => {\n\n        request(payload, function(error, response, body) {\n          if (error) {\n            return reject(error);\n          } else if (response.statusCode && response.statusCode !== 200) {\n            return reject(new UptimeRobotError(response.statusCode, `Server responded with an ${response.statusCode} status code!`));\n          } else if (body.stat !== 'ok') {\n            return reject(new UptimeRobotError(body.id, body.message));\n          }\n\n          return resolve(body);\n        });\n\n      });\n    }\n\n    list(options = {}, Instance = Monitor) {\n\n      return new bluebird((resolve, reject) => {\n        let params = {};\n        if (Instance.name == Monitor.name) {\n          if (!options.logs && options.alertContacts) {\n            return reject(new Error('logs is required if alert contacts is true.'));\n          }\n\n          if (options.monitors) {\n            params.monitors = options.monitors.join('-');\n          }\n          if (options.customUptimeRatio) {\n            params.customUptimeRatio = options.customUptimeRatio.join('-');\n          }\n          if (options.logs) {\n            params.logs = '1';\n          }\n          if (options.alertContacts) {\n            params.alertContacts = '1';\n          }\n          if (options.showMonitorAlertConcats) {\n            params.showMonitorAlertConcats = '1';\n          }\n          if (options.showTimezone) {\n            params.showTimezone = '1';\n          }\n        } else if (Instance.name == Contact.name) {\n\n          if (options.alertcontacts) {\n            params.alertcontacts = options.alertcontacts.join('-');\n          }\n          if (options.offset) {\n            params.offset = options.offset;\n          }\n          if (options.limit) {\n            params.limit = options.limit;\n          }\n        }\n\n        let endpoint = 'get' + Instance.plural.charAt(0).toUpperCase() + Instance.plural.slice(1);\n        return this\n            .request('GET', endpoint, params)\n            .then(response => {\n\n              let results = _.map(response[Instance.plural.toLowerCase()][Instance.singular.toLowerCase()], result => {\n                return new Instance(result);\n              });\n\n              resolve(results);\n            })\n            .catch(reject);\n      });\n\n    }\n\n    create(instance) {\n      return new bluebird((resolve, reject) => {\n\n        switch (true) {\n          case (instance instanceof Monitor):\n          case (instance instanceof Contact):\n            if (!instance.validate()) {\n              return reject(instance.validate());\n            }\n            break;\n\n          default :\n            //let type = Object.prototype.toString.call(new Monitor);\n            return reject(`${typeof instance} is an unsupported instance`);\n        }\n\n        let instanceName = instance.constructor.singular;\n        let endpoint = 'new' + instanceName.charAt(0).toUpperCase() + instanceName.slice(1);\n\n        this.request('GET', endpoint, instance.parse())\n            .then(response => {\n              return response[instance.singular];\n            });\n      });\n\n    }\n\n    edit(instance) {\n      return new bluebird((resolve, reject) => {\n\n        switch (true) {\n          case instance instanceof Monitor:\n          case instance instanceof Contact: {\n            if (!instance.validate()) {\n              return reject(instance.validate());\n            }\n          }\n\n          default : {\n            return reject('This is an unsupported instance');\n          }\n\n        }\n\n        let instanceName = instance.constructor.singular;\n        let endpoint = 'edit' + instanceName.charAt(0).toUpperCase() + instanceName.slice(1);\n\n        return this.request('GET', endpoint, instance.parse())\n            .then(response => {\n              resolve(response[instance.singular]);\n\n            })\n            .catch(reject);\n      });\n    }\n\n    remove(instance) {\n      let instanceName = instance.constructor.singular;\n      let endpoint = 'delete' + instanceName.charAt(0).toUpperCase() + instanceName.slice(1);\n\n      return this.request('GET', endpoint, {monitorID: instance.id})\n        .then(response => {\n          return response[instance.singular];\n\n        });\n    }\n\n  }\n\n  var client = client__Client;\n\n  exports.Client = client;\n\n  'use strict';\n\n  /**\n   * Created by Luke on 30/06/15.\n   */\n\n}));\n"],"sourceRoot":"/source/"}